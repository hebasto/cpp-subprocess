# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "**" ]

jobs:
  build:
    runs-on: ${{ matrix.conf.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 4 configurations:
      # 1. <Windows, Debug, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Debug, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Debug, latest Clang compiler toolchain on the default runner image, default generator>
      # 4. <Linux, Debug, cross-compiling for Windows, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        conf:
          - os: windows-latest
          - os: ubuntu-latest
            compiler: g++
          - os: ubuntu-latest
            compiler: clang++
          - os: ubuntu-latest
            compiler: x86_64-w64-mingw32-g++-posix
        build_type: [Debug]

    steps:
    - uses: actions/checkout@v3

    - name: Set compiler and build type
      if: ${{ matrix.conf.os == 'ubuntu-latest' }}
      # `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html
      run: |
        echo "CXX=${{ matrix.conf.compiler }}" >> "$GITHUB_ENV"
        echo "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" >> "$GITHUB_ENV"

    - name: Set cross-compiling toolchain
      if: ${{ matrix.conf.compiler == 'x86_64-w64-mingw32-g++-posix' }}
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install --no-install-recommends g++-mingw-w64-x86-64-posix wine-binfmt wine32
        sudo systemctl start systemd-binfmt.service
        echo "EXTRA_CMAKE_OPTIONS=-DCMAKE_SYSTEM_NAME=Windows -DCMAKE_EXE_LINKER_FLAGS=-static" >> "$GITHUB_ENV"

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DSUBPROCESS_TESTS=ON
        $EXTRA_CMAKE_OPTIONS
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest --build-config ${{ matrix.build_type }} --timeout 10 -j4
      run: |
        file ./test/test_ret_code.exe
        echo =====================================================
        wine ./test/test_ret_code.exe
        echo =====================================================
        ./test/test_ret_code.exe
        echo =====================================================
